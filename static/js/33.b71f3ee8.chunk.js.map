{"version":3,"file":"static/js/33.b71f3ee8.chunk.js","mappings":"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","sources":["components/Api/Api.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n/*   ====== KEY API ======*/\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n/*   ====== REQUEST API ASYNC FUNCTION ⬇️  ======*/\n\n/*   ====== TREND MOVIES FOR TODAY ======*/\nexport const requestTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n/*   ====== SEARCH MOVIES ======*/\nexport const requestSearch = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data.results;\n};\n\n/*   ====== MOVIE ======*/\nexport const requestMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n/*   ====== MOVIE ACTORS ======*/\nexport const requestActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n/*   ====== MOVIE REVIEWS ======*/\nexport const requestReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\n//ggger45@3@@!wrf\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 7px;\n  gap: 11px;\n  align-items: flex-start;\n  margin-top: 70px;\n`;\n\nexport const List = styled.ul`\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n\nexport const ListInfo = styled.ul`\n  display: flex;\n  flex-direction: row;\n  gap: 50px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const LinkInfo = styled(Link)`\n  text-decoration: none;\n  font-weight: 600;\n  font-size: 18px;\n  color: red;\n`;\nexport const ActorsFilms = styled.li`\n  display: flex;\n`;\n\nexport const TextOverview = styled.p`\n  max-width: 406px;\n  color: red;\n`;\n\nexport const ButtonLink = styled.li`\n  position: absolute;\n  top: 54px;\n  left: 19px;\n  font-weight: 500;\n  font-size: 22px;\n  color: white;\n  border: none;\n  cursor: pointer;\n  list-style: none;\n`;\n\nexport const LinkActors = styled(Link)`\n  text-decoration: none;\n  font-weight: 600;\n  font-size: 18px;\n  color: red;\n`;\n\nexport const ContMovieDetails = styled.div`\n  margin-top: -18px;\n`;\n\nexport const NameDetails = styled.p`\n  color: red;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { requestMovieDetails } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Container,\n  List,\n  ListInfo,\n  LinkInfo,\n  ActorsFilms,\n  TextOverview,\n  ButtonLink,\n  LinkActors,\n  ContMovieDetails,\n  NameDetails,\n} from './MovieDetails.styled';\n\n/*   ====== HOOKS ======*/\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [error, setError] = useState(false);\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  /*   ====== FETCH REQUEST ======*/\n  useEffect(() => {\n    const getMovieDetailsFilms = async () => {\n      try {\n        setError(false);\n        setLoading(true);\n        const data = await requestMovieDetails(movieId);\n        setMovieInfo(data);\n      } catch (error) {\n        toast.error('Sorry, we didnt find anything');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMovieDetailsFilms();\n  }, [movieId]);\n\n  if (!movieInfo) {\n    return;\n  }\n  // useEffect(() => {\n  //   const getMovieDetailsFilms = () => {\n  //     setLoading(true);\n\n  //     requestMovieDetails(movieId)\n  //       .then(detailMovie => {\n  //         setMovieInfo(detailMovie);\n  //       })\n  //       .catch(error => {})\n  //       .finally(() => {\n  //         setLoading(false);\n  //       });\n  //   };\n\n  //   getMovieDetailsFilms();\n  // }, [movieId]);\n\n  /*   ====== DESTRUCTURIZATION  ======*/\n  const defaultNoImages =\n    'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\n  const posterPathOrigin = 'https://image.tmdb.org/t/p/w500';\n\n  const {\n    title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n  } = movieInfo;\n\n  /*   ====== RENDER ======*/\n  return (\n    <main>\n      {\n        <Container>\n          <div>\n            <img\n              width=\"300px\"\n              src={\n                poster_path\n                  ? `${posterPathOrigin}${poster_path}`\n                  : `${defaultNoImages} }`\n              }\n              alt={original_title}\n            />\n          </div>\n\n          <ContMovieDetails>\n            <NameDetails>\n              <b>\n                {title} ({release_date.slice(0, 4)})\n              </b>\n            </NameDetails>\n            <NameDetails>\n              <b>Overview</b>\n            </NameDetails>\n            <TextOverview>{overview}</TextOverview>\n            <NameDetails>\n              <b>User score: </b> {popularity}\n            </NameDetails>\n            <NameDetails>\n              <b>Genres</b>\n            </NameDetails>\n            <List>\n              {genres.map(genre => (\n                <NameDetails key={genre.id}>{genre.name}</NameDetails>\n              ))}\n\n              <div>\n                <NameDetails>\n                  <b>Additional information</b>\n                </NameDetails>\n                <ListInfo>\n                  <LinkActors to=\"cast\">Actors</LinkActors>\n\n                  <ActorsFilms>\n                    <LinkInfo to=\"reviews\">Reviews</LinkInfo>\n                  </ActorsFilms>\n                </ListInfo>\n                <Outlet />\n              </div>\n            </List>\n          </ContMovieDetails>\n\n          <Link to={location.state?.from ?? '/'}>\n            <ButtonLink type=\"button\">Go back</ButtonLink>\n          </Link>\n\n          {loading && <Loader />}\n          {error && toast.error(`Sorry,we didnt find anything`)}\n        </Container>\n      }\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","API_KEY","requestTrending","response","data","results","requestSearch","query","requestMovieDetails","movieId","requestActors","cast","requestReviews","Container","styled","List","ListInfo","LinkInfo","Link","ActorsFilms","TextOverview","ButtonLink","LinkActors","ContMovieDetails","NameDetails","useParams","useState","error","setError","movieInfo","setMovieInfo","loading","setLoading","location","useLocation","useEffect","getMovieDetailsFilms","toast","title","release_date","popularity","overview","genres","poster_path","original_title","width","src","alt","slice","map","genre","name","id","to","state","from","type","Loader"],"sourceRoot":""}