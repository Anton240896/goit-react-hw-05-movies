{"version":3,"file":"static/js/387.09031997.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAIzB,IAAMC,EAAU,mCAKHC,EAAe,mCAAG,oGACNF,EAAAA,EAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,qDAMfC,EAAa,mCAAG,WAAMC,GAAN,uFACJP,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8DM,IAF1D,cACrBJ,EADqB,yBAIpBA,EAASC,KAAKC,SAJM,2CAAH,sDAQbG,EAAmB,mCAAG,WAAMC,GAAN,uFACVT,EAAAA,EAAAA,IAAA,gBACZS,EADY,oBACOR,EADP,oBADU,cAC3BE,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,sDAQnBM,EAAa,mCAAG,WAAMD,GAAN,uFACJT,EAAAA,EAAAA,IAAA,gBACZS,EADY,4BACeR,EADf,oBADI,cACrBE,EADqB,yBAIpBA,EAASC,KAAKO,MAJM,2CAAH,sDAQbC,EAAc,mCAAG,WAAMH,GAAN,uFACLT,EAAAA,EAAAA,IAAA,gBACZS,EADY,4BACeR,EADf,2BADK,cACtBE,EADsB,yBAIrBA,EAASC,KAAKC,SAJO,2CAAH,qD,+HCvCdQ,E,OAAYC,GAAAA,GAAH,8I,iBCiEtB,EAvDa,WACX,IAAQL,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAuBA,OAnBAC,EAAAA,EAAAA,YAAU,WAEND,GAAW,IAEXV,EAAAA,EAAAA,GAAcD,GACXa,MAAK,SAAAC,GACJL,EAAUK,EACX,IACAC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAY,+BACb,IACAC,SAAQ,WACPP,GAAW,EACZ,GAGN,GAAE,CAACX,KAIF,0BACGU,IAAW,SAACS,EAAA,EAAD,KAEZ,SAACf,EAAD,UACGI,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACV,2BACE,gBACEC,MAAM,QACNC,IACEH,EAAY,yCAC0BA,GAD1B,UAvC1B,8EA2CYI,IAAKL,KAEP,wBACE,cAAGM,MAAM,MAAT,SAAgBN,OAElB,0BACE,uBAAG,eAAc,IAAEE,OAddH,EADC,QAsBnB,C","sources":["components/Api/Api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n/*   ====== KEY API ======*/\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n/*   ====== REQUEST API ASYNC FUNCTION ⬇️  ======*/\n\n/*   ====== TREND MOVIES FOR TODAY ======*/\nexport const requestTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n/*   ====== SEARCH MOVIES ======*/\nexport const requestSearch = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data.results;\n};\n\n/*   ====== MOVIE ======*/\nexport const requestMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n/*   ====== MOVIE ACTORS ======*/\nexport const requestActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n/*   ====== MOVIE REVIEWS ======*/\nexport const requestReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\n//ggger45@3@@!wrf\n","import styled from 'styled-components';\n\nexport const ListFilms = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 35px;\n  margin-left: -575px;\n  gap: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { requestActors } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport { ListFilms } from './Cast.styled';\nimport toast from 'react-hot-toast';\n\n/*   ====== DEFAULT IMAGES ======*/\nconst defaultNoImages =\n  'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\n/*   ====== HOOKS ======*/\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  /*   ======  REQUEST FILMS ACTORS ======*/\n\n  useEffect(() => {\n    const getCast = () => {\n      setLoading(true);\n\n      requestActors(movieId)\n        .then(resp => {\n          setActors(resp);\n        })\n        .catch(error => {\n          toast.error('Sorry we didnt find anythyng');\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    getCast();\n  }, [movieId]);\n\n  /*   ====== RENDER ======*/\n  return (\n    <ul>\n      {loading && <Loader />}\n\n      <ListFilms>\n        {actors.map(({ id, name, profile_path, character }) => (\n          <li key={id}>\n            <img\n              width=\"180px\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `${defaultNoImages}`\n              }\n              alt={name}\n            />\n            <p>\n              <b color=\"red\">{name}</b>\n            </p>\n            <p>\n              <b>Character:</b> {character}\n            </p>\n          </li>\n        ))}\n      </ListFilms>\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","API_KEY","requestTrending","response","data","results","requestSearch","query","requestMovieDetails","movieId","requestActors","cast","requestReviews","ListFilms","styled","useParams","useState","actors","setActors","loading","setLoading","useEffect","then","resp","catch","error","toast","finally","Loader","map","id","name","profile_path","character","width","src","alt","color"],"sourceRoot":""}