{"version":3,"file":"static/js/961.a610236a.chunk.js","mappings":"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","sources":["components/Api/Api.jsx","pages/MovieDetails/MovieDetails.jsx","pages/MovieDetails/MovieDetails.styled.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n/*   ====== KEY API ======*/\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n/*   ====== REQUEST API ASYNC FUNCTION ⬇️  ======*/\n\n/*   ====== TREND MOVIES FOR TODAY ======*/\nexport const requestTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n/*   ====== SEARCH MOVIES ======*/\nexport const requestSearch = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data.results;\n};\n\n/*   ====== MOVIE ======*/\nexport const requestMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n/*   ====== MOVIE ACTORS ======*/\nexport const requestActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n/*   ====== MOVIE REVIEWS ======*/\nexport const requestReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\n\nimport { TbArrowBigLeftLine } from 'react-icons/tb';\nimport toast from 'react-hot-toast';\n\nimport { requestMovieDetails } from 'components/Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Container,\n  List,\n  ListInfo,\n  LinkInfo,\n  ActorsFilms,\n  TextOverview,\n  ButtonLink,\n  ContMovieDetails,\n  NameDetailsMovie,\n  UserCont,\n  Title,\n  Img,\n  NameDescription,\n} from './MovieDetails.styled';\n\n/*   ====== HOOKS ======*/\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [error, setError] = useState(false);\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  /*   ====== FETCH REQUEST ======*/\n  useEffect(() => {\n    async function getMovieDetailsFilms() {\n      try {\n        setError(false);\n        setLoading(true);\n        const data = await requestMovieDetails(movieId);\n        setMovieDetails(data);\n      } catch (error) {\n        toast.error('Nothing found');\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieDetailsFilms();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return;\n  }\n  // useEffect(() => {\n  //   const getMovieDetailsFilms = () => {\n  //     setLoading(true);\n\n  //     requestMovieDetails(movieId)\n  //       .then(detailMovie => {\n  //         setMovieInfo(detailMovie);\n  //       })\n  //       .catch(error => {})\n  //       .finally(() => {\n  //         setLoading(false);\n  //       });\n  //   };\n\n  //   getMovieDetailsFilms();\n  // }, [movieId]);\n\n  /*   ====== CONVERT MINUTES TO HOURS  ======*/\n  function getTimeFromMins(mins) {\n    let hours = Math.floor(mins / 60);\n    let minutes = mins % 60;\n\n    if (hours === 0) {\n      return minutes + 'm';\n    }\n\n    if (minutes === 0) {\n      return hours + 'h';\n    }\n\n    return ` ${hours}h ${minutes}m `;\n  }\n\n  /*   ====== DESTRUCTURIZATION  ======*/\n  const {\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n    runtime,\n  } = movieDetails;\n\n  const defaultNoImages =\n    'https://st4.depositphotos.com/14953852/22772/v/450/depositphotos_227725020-stock-illustration-image-available-icon-flat-vector.jpg';\n\n  const posterFilms = 'https://image.tmdb.org/t/p/w500';\n\n  /*   ====== RENDER ======*/\n  return (\n    <main>\n      {\n        <Container>\n          <div>\n            <Img\n              src={\n                poster_path\n                  ? `${posterFilms}${poster_path}`\n                  : `${defaultNoImages} }`\n              }\n              alt={original_title}\n            />\n          </div>\n\n          <ContMovieDetails>\n            <UserCont>\n              <Title>\n                <b>\n                  {title} ({release_date.slice(0, 4) || 'No date found'})\n                </b>\n              </Title>\n            </UserCont>\n\n            <UserCont>\n              <NameDetailsMovie>Release Date •</NameDetailsMovie>\n\n              <TextOverview>\n                <TextOverview>\n                  {release_date.length === 0 ? (\n                    'No date found'\n                  ) : (\n                    <TextOverview>\n                      {dayjs(release_date).format('DD/ MM/ YYYY')}\n                    </TextOverview>\n                  )}\n                </TextOverview>\n              </TextOverview>\n            </UserCont>\n\n            <NameDetailsMovie>\n              <b>Overview •</b>\n            </NameDetailsMovie>\n\n            <TextOverview>\n              {overview.length === 0 ? (\n                'No plot found'\n              ) : (\n                <b>\n                  <NameDescription>{overview}</NameDescription>\n                </b>\n              )}\n            </TextOverview>\n\n            <UserCont>\n              <NameDetailsMovie>Run time •</NameDetailsMovie>\n\n              <TextOverview>\n                {runtime > 0 ? (\n                  <TextOverview>\n                    {getTimeFromMins(runtime)} (duration)\n                  </TextOverview>\n                ) : (\n                  'No time found'\n                )}\n              </TextOverview>\n            </UserCont>\n\n            <UserCont>\n              <NameDetailsMovie>User score •</NameDetailsMovie>\n\n              <TextOverview>\n                {vote_average > 0 ? (\n                  <TextOverview>\n                    {Math.round(vote_average * 10)} % (average vote)\n                  </TextOverview>\n                ) : (\n                  'No rating found'\n                )}\n              </TextOverview>\n            </UserCont>\n\n            <UserCont>\n              <NameDetailsMovie>Genres •</NameDetailsMovie>\n\n              <TextOverview>\n                {genres.length > 0 ? (\n                  <TextOverview>\n                    {genres.map(genre => genre.name).join(' / ')}\n                  </TextOverview>\n                ) : (\n                  'No genres found'\n                )}\n              </TextOverview>\n            </UserCont>\n\n            <UserCont>\n              <NameDetailsMovie>\n                <b>Additonal information •</b>\n              </NameDetailsMovie>\n            </UserCont>\n\n            <List>\n              <div>\n                <ListInfo>\n                  <LinkInfo to=\"cast\">Actors •</LinkInfo>\n\n                  <ActorsFilms>\n                    <LinkInfo to=\"reviews\">Reviews •</LinkInfo>\n                  </ActorsFilms>\n                </ListInfo>\n                <Outlet />\n              </div>\n            </List>\n          </ContMovieDetails>\n\n          <Link to={location.state?.from || '/'}>\n            <ButtonLink type=\"button\">\n              <TbArrowBigLeftLine\n                size={50}\n                style={{\n                  position: 'fixed',\n                  top: '193px',\n                }}\n              />\n            </ButtonLink>\n          </Link>\n\n          {loading && <Loader />}\n          {error && toast.error(`Sorry,we didnt find anything`)}\n        </Container>\n      }\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 32px;\n  gap: 11px;\n  align-items: flex-start;\n  margin-top: 100px;\n\n  @media (max-width: 1220px) {\n    margin-top: 201px;\n    margin-left: -218px;\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const List = styled.ul`\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n\nexport const ListInfo = styled.ul`\n  display: flex;\n  flex-direction: row;\n  gap: 50px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const LinkInfo = styled(Link)`\n  text-decoration: none;\n  font-weight: 400;\n  font-size: 18px;\n  color: var(--tmdbRed);\n  font-family: 'Marck Script';\n\n  &:hover {\n    transform: scale(1, 2);\n    transition: transform 350ms;\n  }\n`;\nexport const ActorsFilms = styled.li`\n  display: flex;\n`;\n\nexport const TextOverview = styled.p`\n  max-width: 199px;\n  color: var(--tmdbRed);\n  font-family: 'Marck Script';\n  font-size: 18px;\n`;\n\nexport const ButtonLink = styled.li`\n  position: fixed;\n  left: 19px;\n  font-weight: 500;\n  font-size: 22px;\n  color: var(--tmdbLightGreen);\n  cursor: pointer;\n  list-style-type: none;\n  top: 135px;\n\n  @media (max-width: 540px) {\n    top: 139px;\n  }\n\n  &:hover {\n    color: var(--tmdbRed);\n  }\n`;\n\nexport const ContMovieDetails = styled.div`\n  margin-top: 22px;\n`;\n\nexport const NameFilms = styled.h2`\n  color: var(--tmdbRed);\n  /* animation: tracking-in-expand 700ms cubic-bezier(0.215, 0.61, 0.355, 1) 700ms\n    both; */\n`;\n\nexport const NameDetailsMovie = styled.h3`\n  color: var(--tmdbRed);\n  font-size: 15px;\n  font-family: 'Marck Script';\n  font-size: 20px;\n  animation: tracking-in-expand 700ms cubic-bezier(0.215, 0.61, 0.355, 1) 700ms\n    both;\n`;\n\nexport const UserCont = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-top: -15px;\n`;\n\nexport const Title = styled.h1`\n  color: var(--tmdbRed);\n  margin-top: -81px;\n  margin-left: -440px;\n  font-size: 44px;\n  max-width: 600px;\n  font-family: 'Courgette';\n  animation: tracking-in-expand 700ms cubic-bezier(0.215, 0.61, 0.355, 1) 700ms\n    both;\n\n  @media (max-width: 1220px) {\n    margin-top: 52px;\n    margin-left: 0;\n    display: flex;\n    flex-direction: column;\n    animation: tracking-in-expand 700ms cubic-bezier(0.215, 0.61, 0.355, 1)\n      700ms both;\n  }\n`;\n\nexport const Img = styled.img`\n  border: thick double var(--tmdbLightGreen);\n  width: 417px;\n  margin-top: 34px;\n`;\n\nexport const NameDescription = styled.p`\n  color: var(--tmdbRed);\n  font-size: 17px;\n  animation: tracking-in-expand 700ms cubic-bezier(0.215, 0.61, 0.355, 1) 700ms\n    both;\n`;\n\nexport const Year = styled.span`\n  color: var(--tmdbLightGreen);\n`;\n"],"names":["axios","API_KEY","requestTrending","response","data","results","requestSearch","query","requestMovieDetails","movieId","requestActors","cast","requestReviews","useParams","useState","error","setError","movieDetails","setMovieDetails","loading","setLoading","location","useLocation","useEffect","toast","getMovieDetailsFilms","title","release_date","vote_average","overview","genres","poster_path","original_title","runtime","src","alt","slice","length","dayjs","format","mins","hours","Math","floor","minutes","getTimeFromMins","round","map","genre","name","join","to","state","from","type","size","style","position","top","Container","styled","List","ListInfo","LinkInfo","Link","ActorsFilms","TextOverview","ButtonLink","ContMovieDetails","NameDetailsMovie","UserCont","Title","Img","NameDescription"],"sourceRoot":""}